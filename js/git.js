// ! -------------- КРАТКО ПРО GIT ------------------

// ! Коммит в git'е сохраняет различия между текущей версией проекта и предыдущей
// ! Git хранит историю того, где и когда коммит был сделан
// ! Большинство коммитов имеют предков
// ! git commit - создаёт коммит
// ! git status - отражает состояние репозитория

// ! -------------- ВЕТКИ --------------
// ! git branch <имя ветки> - создает ветку, но не переключает на неё (новая ветка создается на текущем коммите, т.е. при создании ветки нового коммита не появляется)
// ! git checkout <имя ветки> - переносит на другую ветку
// ! git checkout -b <имя ветки> - создает ветку и переносит на неё (фактически объединение двух предыдущих комманд)
// ! Имя ветки пишется без кавычек

// ! -------------- СЛИЯНИЯ (MERGE, REBASE) --------------
// ! git merge <имя ветки, с которой мы хотим объединить текущую> - делает слияние двух веток, т.е. создает новый коммит, который сохраняет изменения от обоих веток
// ! Если сделать merge для родительского коммита, то merge просто сдвинет голову на текущий коммит

// ! git rebase <имя целевой ветки> - также объединяет изменения, но вместо наследования от двух коммитов фактически копирует изменения текущего коммита и добавляет их поверх целевого, т.е. создается линейная структура

// ! -------------- НАВИГАЦИЯ --------------
// ! HEAD - символическое имя текущего коммита, над которым мы работает в данный момент
// ! Обычно HEAD указывает на имя ветки
// ! Отделить голову, значит присвоить его конкретному коммиту (можно с помощью хэша, git checkout <хэш>)
// ! Хэш можно писать не полностью, достаточно первых пяти символов

// ! ^ - переносит HEAD на родитель указанного коммита
// ! git checkout master^^ - перейдет на прародителя master
// ! Также можно использовать HEAD как относительную ссылку (git checkout HEAD^ - допустимо)

// ! ~<число> - переносит HEAD на указанное число коммитов назад
// ! git branch -f master HEAD~3 - переместит ветку master на 3 родителя назад от HEAD

// ! -------------- ОТМЕНА ИЗМЕНЕНИЙ В GIT -------------
// ! git reset - переносит ссылку на ветку назад
// ! get reset HEAD^ - перенесет текущую ветку назад на один коммит
// ! git revert HEAD - делает новый коммит, с изменениями, противоположными предыдущим

// ! -------------- CHERRY PICK --------------
// ! git cherry-pick <коммит 1> <коммит 2>... - копирование нескольких коммитов в текущую ветку

// ! -------------- РАБОТА С УДАЛЕННЫМИ РЕПОЗИТОРИЯМИ -------------
// ! git clone - сохраняет локально удалённый репозиторий
// ! git remote -v - выведет список удалённых репозиториев, и адреса для чтения и записи
// ! git remote add <короткое имя> <url> - добавляет удалённый репозиторий
// ! origin - имя сервера удалённого репозитория по умолчанию

// ! git fetch <имя репозитория> - обновляет данные с удалённого репозитория
